
import streamlit as st
import pandas as pd
from datetime import datetime

def voice_to_action_game():
    st.set_page_config(page_title="Du Besoin Client √† l'Action", layout="centered")
    st.title("üöÄ Du Besoin Client √† l'Action ‚Äì Jeu Lean Thinking")

    with st.expander("üåü Pourquoi la Voix du Client est-elle importante ?"):
        st.markdown("""
        Chaque jour, votre travail a un impact sur la vie de quelqu'un d'autre.

        **La Voix du Client (VOC)** est la fa√ßon dont les clients expriment, avec leurs propres mots, ce qui compte le plus pour eux.

        Votre r√¥le n'est pas seulement d'√©couter, mais de traduire leurs besoins en actions, normes et r√©sultats mesurables.

        **Les exigences critiques pour la qualit√© (CTQ)** transforment les besoins en qualit√© mesurable.

        √âcouter est bien.  
        Comprendre est mieux.  
        Livrer, c'est l'excellence.
        """)

    st.header("üéØ Votre Mission :")
    st.markdown("""
√âcoutez attentivement la Voix du Client.
Traduisez-la en exigences CTQ (Critical to Quality).
Identifiez la bonne m√©trique √† suivre.
    """)

    player_name = st.text_input("üë§ Entrez votre nom ou √©quipe :", key="player_name")

    level = st.radio("Choisissez votre Niveau :", ["üçï Niveau 1 : Alimentation & Boissons", "üìû Niveau 2 : Services"])

    if level == "üçï Niveau 1 : Alimentation & Boissons":
        questions = [
            {
                "story": "Vous g√©rez un service de livraison de caf√©. Un client √©crit : 'Je veux que mon caf√© soit chaud √† la livraison.'",
                "ctq_options": ["Livrer le caf√© en moins de 10 minutes", "Caf√© servi √† au moins 65¬∞C", "Utiliser des gobelets √©cologiques"],
                "correct_ctq": "Caf√© servi √† au moins 65¬∞C",
                "metric": "Temp√©rature du caf√© √† la livraison",
                "feedback": "‚úÖ La temp√©rature garantit l'exp√©rience sensorielle attendue par le client."
            },
            {
                "story": "Vous g√©rez un service de livraison de pizza. Un client √©crit : 'Je veux que ma pizza soit fra√Æche, comme tout juste sortie du four ‚Äî ne la laissez pas attendre trop longtemps.'",
                "ctq_options": ["Livrer la pizza en moins de 20 minutes", "Temp√©rature de la pizza sup√©rieure √† 60¬∞C", "Bo√Æte √† pizza √©cologique"],
                "correct_ctq": "Livrer la pizza en moins de 20 minutes",
                "metric": "Temps moyen de livraison depuis la sortie du four",
                "feedback": "‚úÖ Une livraison rapide garantit la fra√Æcheur du produit comme attendu par le client."
            },
            {
                "story": "Vous g√©rez un service de livraison de glaces. Un client √©crit : 'Je veux que ma glace arrive congel√©e, pas fondue.'",
                "ctq_options": ["Livrer la glace en moins de 20 minutes", "Temp√©rature de la glace maintenue en dessous de -10¬∞C", "Utiliser des contenants √©cologiques"],
                "correct_ctq": "Temp√©rature de la glace maintenue en dessous de -10¬∞C",
                "metric": "Temp√©rature de la glace √† la livraison",
                "feedback": "‚úÖ Pour les produits surgel√©s, maintenir une temp√©rature basse est essentiel pour satisfaire les attentes du client."
            }
        ]
    else:
        questions = [
            {
                "story": "Vous travaillez dans un centre de service client. Un client √©crit : 'Je veux que mon probl√®me soit r√©solu au premier contact.'",
                "ctq_options": ["Temps d'attente inf√©rieur √† 2 minutes", "Taux de R√©solution au Premier Contact sup√©rieur √† 90%", "Temps moyen de traitement inf√©rieur √† 5 minutes"],
                "correct_ctq": "Taux de R√©solution au Premier Contact sup√©rieur √† 90%",
                "metric": "Pourcentage de cas r√©solus sans escalade",
                "feedback": "‚úÖ La R√©solution au Premier Contact mesure directement la satisfaction des attentes du client."
            },
            {
                "story": "Vous g√©rez une √©quipe de reporting. Un client dit : 'J'ai besoin de rapports exacts livr√©s √† temps chaque semaine.'",
                "ctq_options": ["Rapports livr√©s sous 1 jour", "0% d'erreurs dans les rapports", "Utiliser un nouveau logiciel de reporting"],
                "correct_ctq": "0% d'erreurs dans les rapports",
                "metric": "Taux d'erreur dans les rapports hebdomadaires",
                "feedback": "‚úÖ La pr√©cision des rapports correspond directement aux attentes du client en mati√®re de fiabilit√©."
            },
            {
                "story": "Vous travaillez dans un centre de service RH. Un nouvel employ√© dit : 'Je veux que mes documents d'int√©gration soient pr√™ts avant mon premier jour.'",
                "ctq_options": ["Acc√®s au portail RH en 24 heures", "Tous les documents d'int√©gration pr√™ts 48h avant la date d'entr√©e", "Le manager rencontre le nouvel employ√© le premier jour"],
                "correct_ctq": "Tous les documents d'int√©gration pr√™ts 48h avant la date d'entr√©e",
                "metric": "Pourcentage de dossiers d'int√©gration pr√™ts 2 jours avant l'entr√©e",
                "feedback": "‚úÖ Avoir les documents pr√™ts √† l'avance garantit une int√©gration fluide et professionnelle."
            }
        ]

    st.subheader("üß© Traduisez la Voix en Action")
    total_score = 0
    results = []

    for idx, q in enumerate(questions):
        st.markdown(f"**Sc√©nario {idx+1} :**")
        st.info(q["story"])

        guess_ctq = st.radio(f"Quel est le bon CTQ ?", q["ctq_options"], key=f"ctq_{idx}")
        metric_guess = st.text_input(f"Sugg√©rez une m√©trique √† suivre :", key=f"metric_{idx}")

        is_correct_ctq = (guess_ctq == q["correct_ctq"])
        results.append({
            "Joueur": player_name,
            "Sc√©nario": q["story"],
            "Votre choix CTQ": guess_ctq,
            "CTQ correct": q["correct_ctq"],
            "M√©trique propos√©e": metric_guess,
            "M√©trique attendue": q["metric"],
            "Correct": is_correct_ctq
        })

        if is_correct_ctq:
            total_score += 2

    st.markdown("---")
    st.subheader("üèÅ Score Final")
    st.markdown(f"### üéØ Votre score total est : **{total_score}** points!")

    if st.button("üîç Afficher toutes les bonnes r√©ponses"):
        st.subheader("‚úÖ Voici les bonnes r√©ponses et explications :")
        for q in questions:
            st.success(f"CTQ : {q['correct_ctq']} ‚Äî M√©trique : {q['metric']}")
            st.caption(q['feedback'])

    if player_name.strip():
        df = pd.DataFrame(results)
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"voice_to_action_results_FR_{player_name}_{timestamp}.csv"
        st.success("üì• Vos r√©sultats ont √©t√© sauvegard√©s !")
        st.download_button("‚¨á T√©l√©charger vos r√©sultats", data=df.to_csv(index=False), file_name=filename, mime="text/csv")

    st.markdown("---")
    st.subheader("üåü R√©flexion Finale : Connecter et Livrer")
    st.markdown("""
    ‚ú® Maintenant, posez-vous la question :

    > **√âcoutez-vous vraiment vos Clients ?**  
    > **Transformez-vous vraiment leurs besoins en actions, mesures et am√©liorations ?**

    ‚û°Ô∏è √âcoutez profond√©ment.  
    ‚û°Ô∏è Traduisez avec sagesse.  
    ‚û°Ô∏è Livrez avec conscience, avec but, avec c≈ìur. üíñ
    """)

voice_to_action_game()
